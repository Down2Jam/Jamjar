"use client";

import React, { forwardRef } from "react";
import type { LucideProps, LucideIcon } from "lucide-react";
import {
  ALargeSmall,
  ArrowLeft,
  ArrowRight,
  ArrowUpRight,
  Ban,
  Banana,
  Book,
  BookCopy,
  Bug,
  Calendar,
  Calendar1,
  CalendarArrowDown,
  CalendarCog,
  CalendarDays,
  CalendarFold,
  CalendarPlus,
  CalendarRange,
  Check,
  ChevronDown,
  ChevronsDown,
  CircleAlert,
  CircleDotDashed,
  CircleHelp,
  Clipboard,
  Clock1,
  Clock2,
  Clock3,
  Clock4,
  ClockArrowDown,
  ClockArrowUp,
  Cloudy,
  Code,
  Cog,
  Dice3,
  Droplet,
  Fan,
  FileCode,
  Flame,
  Gamepad,
  Gamepad2,
  Hammer,
  Headphones,
  Heart,
  Infinity,
  Info,
  Layers,
  Lightbulb,
  LineChart,
  Link,
  LogIn,
  LogOut,
  Map,
  Maximize2,
  Menu,
  MessageCircle,
  MessagesSquare,
  MicVocal,
  Minimize2,
  Minus,
  Moon,
  MoveUpRight,
  Music,
  Paintbrush,
  Palette,
  Pause,
  Pencil,
  Pill,
  Play,
  Plus,
  Rat,
  RefreshCwOff,
  Repeat,
  RotateCcw,
  Rss,
  Save,
  Search,
  Send,
  Settings,
  Settings2,
  Shell,
  Shield,
  ShieldAlert,
  ShieldX,
  SkipBack,
  SkipForward,
  Slice,
  Sparkles,
  SquareDashed,
  SquarePen,
  Star,
  StarOff,
  Swords,
  Syringe,
  Trash,
  Trophy,
  Tv,
  User,
  UserPlus,
  Users,
  Users2,
  UserX,
  Volume2,
  Waves,
  X,
  ZoomOut,
} from "lucide-react";
import { useTheme } from "@/providers/SiteThemeProvider";

const iconMap = {
  alargesmall: ALargeSmall,
  arrowleft: ArrowLeft,
  arrowright: ArrowRight,
  arrowupright: ArrowUpRight,
  ban: Ban,
  banana: Banana,
  book: Book,
  bookcopy: BookCopy,
  broadcast: Tv,
  bug: Bug,
  calendar: Calendar,
  calendar1: Calendar1,
  calendararrowdown: CalendarArrowDown,
  calendarcog: CalendarCog,
  calendardays: CalendarDays,
  calendarfold: CalendarFold,
  calendarplus: CalendarPlus,
  calendarrange: CalendarRange,
  check: Check,
  chevrondown: ChevronDown,
  chevronsdown: ChevronsDown,
  circlealert: CircleAlert,
  circledotdashed: CircleDotDashed,
  circlehelp: CircleHelp,
  clipboard: Clipboard,
  clock1: Clock1,
  clock2: Clock2,
  clock3: Clock3,
  clock4: Clock4,
  clockarrowup: ClockArrowUp,
  clockarrowdown: ClockArrowDown,
  cloudy: Cloudy,
  code: Code,
  cog: Cog,
  dice3: Dice3,
  droplet: Droplet,
  fan: Fan,
  filecode: FileCode,
  flame: Flame,
  gamepad: Gamepad,
  gamepad2: Gamepad2,
  hammer: Hammer,
  headphones: Headphones,
  heart: Heart,
  infinity: Infinity,
  info: Info,
  layers: Layers,
  lightbulb: Lightbulb,
  linechart: LineChart,
  link: Link,
  login: LogIn,
  logout: LogOut,
  map: Map,
  maximize2: Maximize2,
  menu: Menu,
  messagecircle: MessageCircle,
  messagessquare: MessagesSquare,
  micvocal: MicVocal,
  minimize2: Minimize2,
  minus: Minus,
  moon: Moon,
  moveupright: MoveUpRight,
  music: Music,
  paintbrush: Paintbrush,
  palette: Palette,
  pause: Pause,
  pencil: Pencil,
  pill: Pill,
  play: Play,
  plus: Plus,
  rat: Rat,
  refreshcwoff: RefreshCwOff,
  repeat: Repeat,
  rotateccw: RotateCcw,
  rss: Rss,
  save: Save,
  search: Search,
  send: Send,
  settings: Settings,
  settings2: Settings2,
  shell: Shell,
  shield: Shield,
  shieldalert: ShieldAlert,
  shieldx: ShieldX,
  skipback: SkipBack,
  skipforward: SkipForward,
  slice: Slice,
  sparkles: Sparkles,
  squaredashed: SquareDashed,
  squarepen: SquarePen,
  star: Star,
  staroff: StarOff,
  swords: Swords,
  syringe: Syringe,
  trash: Trash,
  trophy: Trophy,
  user: User,
  userplus: UserPlus,
  userx: UserX,
  users: Users,
  users2: Users2,
  volume2: Volume2,
  waves: Waves,
  x: X,
  zoomout: ZoomOut,
} as const satisfies Record<string, LucideIcon>;

export type IconName = keyof typeof iconMap;
type Color =
  | "text"
  | "textFaded"
  | "red"
  | "orange"
  | "yellow"
  | "green"
  | "blue";

export interface IconProps extends Omit<LucideProps, "color" | "size"> {
  name?: IconName;
  size?: number;
  color?: Color;
}

const Icon = forwardRef<SVGSVGElement, IconProps>(function Icon(
  { name = "circlehelp", size = 24, color, ...rest },
  ref
) {
  const { colors } = useTheme();

  const IconComponent: LucideIcon = iconMap[name];

  return (
    <IconComponent
      ref={ref}
      size={size}
      color={color ? colors[color] : undefined}
      {...rest}
    />
  );
});

export default Icon;
